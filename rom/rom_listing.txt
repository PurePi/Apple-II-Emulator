                     * listing for rom.asm generated on 2019-1-19 at 23:11:11

FA00:              1         ORG $FA00       ; we know this file will be loaded into address $FA00, and the reset vector points here
FA00:              2 
FA00:              3 ACC     EQU $00         ; zeropage addresses used for storing important data
FA00:              4 XREG    EQU $01
FA00:              5 YREG    EQU $02
FA00:              6 STATUS  EQU #03
FA00:              7 SPTR    EQU $04
FA00:              8 COUTLO  EQU $05
FA00:              9 COUTHI  EQU $06
FA00:             10 
FA00:  4C 36 FA   11         JMP kbdex       ; jump to an example
FA03:             12 
FA03:             13 *       writing to screen example
FA03:             14 
FA03:             15 ODDROWL EQU $00         ; low byte of odd-numbered rows (first row is row 1 in this example)
FA03:             16 EVNROWL EQU $80
FA03:             17 ROW1H   EQU $04         ; page number of rows 1 and 2
FA03:             18 ROW3H   EQU $05         ; page number of rows 3 and 4
FA03:             19 
FA03:  A9 21      20 printex LDA #$21        ; starting ascii code
FA05:  A0 00      21         LDY #$00        ; index in row to place char
FA07:             22 
FA07:  A2 04      23         LDX #ROW1H      ; put address of row into COUTLO, COUTHI
FA09:  86 06      24         STX COUTHI
FA0B:  A2 00      25         LDX #ODDROWL
FA0D:  86 05      26         STX COUTLO
FA0F:  20 25 FA   27         JSR outloop
FA12:             28 
FA12:  A2 80      29         LDX #EVNROWL    ; adjust row base address, row 2 is even but page is the same so COUTHI can stay
FA14:  86 05      30         STX COUTLO
FA16:  20 25 FA   31         JSR outloop
FA19:             32 
FA19:  A2 05      33         LDX #ROW3H      ; adjust row base address, page also changes this time
FA1B:  86 06      34         STX COUTHI
FA1D:  A2 00      35         LDX #ODDROWL
FA1F:  86 05      36         STX COUTLO
FA21:  20 25 FA   37         JSR outloop
FA24:  02         38 done    HCF
FA25:             39 
FA25:  91 05      40 outloop STA (COUTLO),Y  ; store character at row base address + Y
FA27:  69 01      41         ADC #$01
FA29:  C9 7F      42         CMP #$7F
FA2B:  F0 F7      43         BEQ done
FA2D:  C8         44         INY
FA2E:  C0 28      45         CPY #$28
FA30:  D0 F3      46         BNE outloop
FA32:  A0 00      47         LDY #$00
FA34:  18         48         CLC             ; CPY sets carry if Y >= data ($28 = $28 in this case)
FA35:  60         49         RTS
FA36:             50 
FA36:             51 *       print keyboard input onto screen example
FA36:             52 
FA36:  A0 00      53 kbdex   LDY #$00        ; set up screen output the same way as above example
FA38:             54 
FA38:  A2 04      55         LDX #ROW1H
FA3A:  86 06      56         STX COUTHI
FA3C:  A2 00      57         LDX #ODDROWL
FA3E:  86 05      58         STX COUTLO
FA40:             59 
FA40:  2C 00 C0   60 scanin  BIT $C000       ; check if highest bit is on (input received flag)
FA43:  30 03      61         BMI input
FA45:  4C 40 FA   62         JMP scanin
FA48:             63 
FA48:  AD 00 C0   64 input   LDA $C000       ; get that input, remove highest bit to get ascii code
FA4B:  29 7F      65         AND #$7F
FA4D:  8D 10 C0   66         STA $C010       ; reference $C010-$C01F to clear input flag on $C000-$C00F
FA50:  91 05      67         STA (COUTLO),Y
FA52:  C9 53      68         CMP #'S'        ; 'S' = second page (only placing text on first page so it'll be blank)
FA54:  F0 0F      69         BEQ secndpg
FA56:  C9 50      70         CMP #'P'        ; 'P' = first page
FA58:  F0 11      71         BEQ frstpg
FA5A:  C8         72 cont    INY
FA5B:  C0 28      73         CPY #$28
FA5D:  D0 E1      74         BNE scanin
FA5F:  A0 00      75         LDY #$00        ; just wrap around same line
FA61:  18         76         CLC             ; CPY sets carry if Y >= data ($28 = $28 in this case)
FA62:  4C 40 FA   77         JMP scanin
FA65:             78 
FA65:  8D 55 C0   79 secndpg STA $C055       ; switch to second page
FA68:  4C 5A FA   80         JMP cont
FA6B:  8D 54 C0   81 frstpg  STA $C054       ; switch to first page
FA6E:  4C 5A FA   82         JMP cont
FA71:             83 
FA71:             84 *       peripheral card PROM example
FA71:             85 ***     NOT YET IMPLEMENTED
FA71:             86 
FA71:  20 8F FA   87         JSR SAVE        ; save all registers
FA74:  78         88         SEI             ; disable interrupts
FA75:  BA         89         TSX             ; stack pointer points to page of return address that JSR just pushed, slot n is in the form of $Cn
FA76:  BD 00 01   90         LDA $0100,X     ; load that page number into A
FA79:  8D F8 07   91         STA $07F8       ; $7F8 is meant for keeping page number of active card
FA7C:  29 0F      92         AND #$0F
FA7E:  0A         93         ASL A
FA7F:  0A         94         ASL A
FA80:  0A         95         ASL A
FA81:  0A         96         ASL A
FA82:  AA         97         TAX             ; X now has slot number in the form of $n0
FA83:  BD 80 C0   98         LDA $C080,X     ; access byte 0 of your card's scratchpad
FA86:  BD 81 C0   99         LDA $C081,X     ; access byte 1 of your card's scratchpad (up to $C08F,X for byte 15)
FA89:  AD FF CF  100         LDA $CFFF       ; request access to expansion rom by referencing $CFFF
FA8C:  20 00 C8  101         JSR $C800       ; can now access your card's expansion rom ($C800-$CFFF)
FA8F:            102 
FA8F:            103 *       ROM subroutines
FA8F:            104 
FA8F:  85 00     105 SAVE    STA ACC
FA91:  86 01     106         STX XREG
FA93:  84 02     107         STY YREG
FA95:  08        108         PHP
FA96:  68        109         PLA
FA97:  85 03     110         STA STATUS
FA99:  BA        111         TSX
FA9A:  86 04     112         STX SPTR
FA9C:  D8        113         CLD
FA9D:  60        114         RTS
FA9E:  A5 03     115 RESTORE LDA STATUS
FAA0:  48        116         PHA
FAA1:  A5 00     117         LDA ACC
FAA3:  A6 01     118         LDX XREG
FAA5:  A4 02     119         LDY YREG
FAA7:  28        120         PLP
FAA8:  60        121         RTS

                     * Assembled 169 bytes