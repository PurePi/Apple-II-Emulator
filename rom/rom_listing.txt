                     * listing for rom.asm generated on 2019-1-27 at 19:13:51

FA00:              1         ORG $FA00       ; we know this code will be loaded into address $FA00, and the reset vector points here
FA00:              2 
FA00:              3 ACC     EQU $00         ; zeropage addresses used for storing important data
FA00:              4 XREG    EQU $01
FA00:              5 YREG    EQU $02
FA00:              6 STATUS  EQU #03
FA00:              7 SPTR    EQU $04
FA00:              8 COUTLO  EQU $05         ; for storing low/high byte of row address
FA00:              9 COUTHI  EQU $06
FA00:             10 PAGE1Y  EQU $07         ; keep track of Y position on first page
FA00:             11 PAGE2Y  EQU $08         ; keep track of Y position on second page
FA00:             12 
FA00:  4C 36 FA   13         JMP kbdex       ; jump to an example
FA03:             14 
FA03:             15 *       writing to screen example
FA03:             16 
FA03:             17 ODDROWL EQU $00         ; low byte of odd-numbered rows (first row is row 1 in this example)
FA03:             18 EVNROWL EQU $80
FA03:             19 ROW1H   EQU $04         ; high byte of rows 1 and 2
FA03:             20 ROW3H   EQU $05         ; high byte of rows 3 and 4
FA03:             21 PG2H    EQU $08         ; high byte of screen page 2 (first row)
FA03:             22 
FA03:  A9 A0      23 printex LDA #$A0        ; start at first normal character
FA05:  A0 00      24         LDY #$00        ; index in row to place char
FA07:  A2 04      25         LDX #ROW1H      ; put address of row into COUTLO, COUTHI
FA09:  86 06      26         STX COUTHI
FA0B:  A2 00      27         LDX #ODDROWL
FA0D:  86 05      28         STX COUTLO
FA0F:  20 25 FA   29         JSR outloop
FA12:  A2 80      30         LDX #EVNROWL    ; adjust row base address, row 2 is even but page is the same so COUTHI can stay
FA14:  86 05      31         STX COUTLO
FA16:  20 25 FA   32         JSR outloop
FA19:  A2 05      33         LDX #ROW3H      ; adjust row base address, page also changes this time
FA1B:  86 06      34         STX COUTHI
FA1D:  A2 00      35         LDX #ODDROWL
FA1F:  86 05      36         STX COUTLO
FA21:  20 25 FA   37         JSR outloop
FA24:  02         38 done    HCF             ; halt and catch fire
FA25:  91 05      39 outloop STA (COUTLO),Y  ; store character at row base address + Y
FA27:  C9 DF      40         CMP #$DF
FA29:  F0 F9      41         BEQ done        ; done when we reach last character
FA2B:  69 01      42         ADC #$01
FA2D:  C8         43         INY
FA2E:  C0 28      44         CPY #$28
FA30:  D0 F3      45         BNE outloop
FA32:  A0 00      46         LDY #$00
FA34:  18         47         CLC             ; CPY sets carry if Y >= data ($28 = $28 in this case)
FA35:  60         48         RTS
FA36:             49 
FA36:             50 *       print keyboard input onto screen example
FA36:             51 
FA36:  A0 00      52 kbdex   LDY #$00        ; set up screen output the same way as above example
FA38:  A2 04      53         LDX #ROW1H
FA3A:  86 06      54         STX COUTHI
FA3C:  A2 00      55         LDX #ODDROWL
FA3E:  86 05      56         STX COUTLO
FA40:  18         57 undersc CLC
FA41:  A9 5F      58         LDA #$5F
FA43:  91 05      59         STA (COUTLO),Y
FA45:  2C 00 C0   60 scan    BIT $C000       ; check if highest bit is on (input received flag)
FA48:  30 03      61         BMI input
FA4A:  4C 45 FA   62         JMP scan
FA4D:  AD 00 C0   63 input   LDA $C000       ; get that input, keep highest bit to display normally
FA50:  8D 10 C0   64         STA $C010       ; reference $C010-$C01F to clear input flag on $C000-$C00F
FA53:  C9 8D      65         CMP #$8D        ; enter to switch pages
FA55:  F0 0D      66         BEQ swtchpg
FA57:  18         67         CLC
FA58:  91 05      68         STA (COUTLO),Y
FA5A:  C8         69         INY
FA5B:  C0 28      70         CPY #$28
FA5D:  D0 E1      71         BNE undersc
FA5F:  A0 00      72         LDY #$00        ; just wrap around same line
FA61:  4C 40 FA   73         JMP undersc
FA64:  A6 06      74 swtchpg LDX COUTHI
FA66:  E0 08      75         CPX #PG2H       ; if high byte of row is $08, we're currently on second page so we switch to the first
FA68:  F0 0E      76         BEQ firstpg     ; otherwise this branch doesn't happen and it continues to switch to second page
FA6A:  8D 55 C0   77 secndpg STA $C055       ; switch to second page
FA6D:  84 07      78         STY PAGE1Y      ; save Y offset used in first page
FA6F:  A4 08      79         LDY PAGE2Y      ; recall the offset used in second page
FA71:  A2 08      80         LDX #PG2H       ; switch base address of row to that of the second page
FA73:  86 06      81         STX COUTHI
FA75:  4C 40 FA   82         JMP undersc
FA78:  8D 54 C0   83 firstpg STA $C054       ; switch to first page
FA7B:  84 08      84         STY PAGE2Y
FA7D:  A4 07      85         LDY PAGE1Y
FA7F:  A2 04      86         LDX #ROW1H
FA81:  86 06      87         STX COUTHI
FA83:  4C 40 FA   88         JMP undersc
FA86:             89 *       using peripheral cards in slot 1 and 4 example (both contain the same card)
FA86:             90 
FA86:  8D 90 C0   91 cardex  STA $C090       ; first need to reference slot 1's GPIO space to select it
FA89:  20 00 C1   92         JSR $C100       ; jump to its PROM
FA8C:  8D C4 C0   93         STA $C0C4       ; now let's use slot 4 (can reference any byte in its GPIO space, not only byte 0)
FA8F:  20 00 C4   94         JSR $C400
FA92:  8D 90 C0   95         STA $C090       ; and slot 1 again (remember that this first reference does not trigger its callback, only enables it)
FA95:  20 00 C1   96         JSR $C100
FA98:  02         97         HCF
FA99:             98 
FA99:             99 *       ROM subroutines
FA99:            100 
FA99:  85 00     101 SAVE    STA ACC
FA9B:  86 01     102         STX XREG
FA9D:  84 02     103         STY YREG
FA9F:  08        104         PHP
FAA0:  68        105         PLA
FAA1:  85 03     106         STA STATUS
FAA3:  BA        107         TSX
FAA4:  86 04     108         STX SPTR
FAA6:  D8        109         CLD
FAA7:  60        110         RTS
FAA8:  A5 03     111 RESTORE LDA STATUS
FAAA:  48        112         PHA
FAAB:  A5 00     113         LDA ACC
FAAD:  A6 01     114         LDX XREG
FAAF:  A4 02     115         LDY YREG
FAB1:  28        116         PLP
FAB2:  60        117         RTS

                     * Assembled 179 bytes